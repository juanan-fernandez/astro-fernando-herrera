---
import type { GetStaticPaths } from 'astro'
import Layout from '@layouts/Layout.astro'
import PokemonCard from '@components/pokemons/PokemonCard.astro'
import type { PokemonsResponse } from '@interfaces/pokemon.type'

export const getStaticPaths = (async () => {
	const resp = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151')
	const data = (await resp.json()) as PokemonsResponse

	// Generate paths for each Pokemon
	// The params object must contain the same name as the dynamic route
	// in this case, the name of the file is [name].astro
	// so the params object must contain a name property
	const pokemonPaths = data.results.map(pokemon => {
		return {
			params: { id: pokemon.url.split('/')[6] },
			props: { name: pokemon.name, url: pokemon.url }
		}
	})
	return pokemonPaths
}) satisfies GetStaticPaths

const { id } = Astro.params
const { name, url } = Astro.props
const audioUrl = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`
const imgSrc = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`
---

<Layout>
	<h1 class='text-3xl'>Pokemon Static</h1>
	<hr />

	<section class='mt-10 mx-10 flex flex-col justify-center items-center'>
		<div>
			<a href='#' onclick=' window.history.back()' class='no-underline hover:underline text-blue-400'>Back</a>
			<h1 class='text-3xl mb-3 capitalize'>{name}</h1>
		</div>
		<PokemonCard name={name} url={url} isBig={true} />
		<audio src={audioUrl} controls class='mt-5'></audio>
	</section>
</Layout>
